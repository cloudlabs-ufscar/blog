DAT_001072a0 - Global variable that points to the string being built
DAT_001072c0 - Global variable that points to the target string
DAT_001072c8 - Global variable that points to the target string's length
DAT_0010701c - Turns counter
DAT_00107014 - Max turns allowed -- set to 100

FUN_00104478 - Main function, runs until "episode3,57min34sec" is built or turns run out

FUN_001032b8 - First function call on main. Reads user input with std::getline and stores it in a local variable local_13e8. It then calls
FUN_0010452f which converts the string on local_13e8 to an int using strtol. This int is saved on iVar6 which will be used as a seed. Then
FUN_00104726 is called, which creates an array of random integeres based on the seed and saves it to local_13c8.
A loop runs for DAT_001072c8 iterations (this value is the length of the target string, and is assigned to iVar9 on FUN_001032b8)
In each iteration of the loop, FUN_001048de is called, and it generates a random printable ascii character (between 0x21 and 0x7e)
These characters are appended to DAT_001072a0, forming the initial string with random characters
A second loop runs for DAT_001072c8 % 5 iterations. In each iteration, a random index is generated by FUN_001048de
The character on this index on DAT_001072a0 is replaced by the equivalent character of the target string (DAT_001072c0)
Rest of code on FUN_001032b8 is memory cleanup

When FUN_001032b8 finishes running, we have a string with mostly random characters on DAT_001072a0, except for a few characters that match the target string

FUN_00102d64 - Second function called by main. Starts with a system('clear'), to clean the screen. Then calls multiple functions to display game status
FUN_001026e9, which prints out the 'move counter' on screen and total allowed moves. Here we see two global variables:
DAT_0010701c stores the current move's number and DAT_00107014 stores the total allowed moves.
FUN_00102adf displays the target string using DAT_001072c0 and DAT_001072c8 (it's length)
FUN_0010285a displays the player's progress (prints the string beinig built)
FUN_0010279d draws a separator (----)

FUN_00103000 - Third function called by main, makes sure the maximum ammount of turns isn't exceeded. Compares DAT_0010701c (current move) to DAT_00107014 (max moves)

With that out of the way, we can go to the main function that processes each move and modifies the string being built accordingly

FUN_00103956 - Much like the first challenge, this function takes an inputted code and executes a specific function based on it
This time, it seems we can't move the pointer. It's always in the middle of the string, we can only manipulate the characters in that one slot
So the pointer will always be at DAT_001072a0[9]
Available commands:
FUN_00102e75 - 1 value: 
    Sets the character DAT_001072a0[9] to char(value)
    value must be a ascii char in hex
    only works once (i think? Probably needs to be the first command)
    Resets counters for commands 2 & 3 by running FUN_00102e5c (same function call for the other counter resets)

FUN_001035b2 - 2:
    Increments DAT_001072a0[9]. The amount added is 3 for the first three consecutive uses. After that the added ammt is random 3<=x=>5
    Increments its own usage counter DAT_00107284

FUN_00103784 - 3: 
    Decrements DAT_001072a0[9]. The amount subtracted is 1 for the first five consecutive uses. After that the subbd ammt is random 1<=x=>3
    Increments its own usage counter DAT_00107280

FUN_00102eab - 7:
    Sets DAT_001072a0[7] to 7 (ascii 55)
    only command that directly modified another memory slot that isn't [9]
    Resets counters for commands 2 & 3

FUN_00102f26 - 8:
    Swaps DAT_001072a0[9] with DAT_001072a0[9+2]
    wraps around
    Resets counters for commands 2 & 3

FUN_00102ebb - 9:
    Swaps DAT_001072a0[9] with DAT_001072a0[9-1]
    Wraps around
    Resets counters for commands 2 & 3

FUN_00102de9 15 (0xf):
    Sets DAT_001072a0[9] to G (ascii 71)
    Resets counters for commands 2 & 3

FUN_00102e2e 19 (0x13):
    Sets DAT_001072a0[9] to c (ascii 99)
    Resets counters for commands 2 & 3

FUN_00102e45 22 (0x16):
    Sets DAT_001072a0[9] to ; (ascii 59)
    not in target string so might be useless, there were useless ones in the first challenge as well
    could be used in combination w commands 2 and 3
    Resets counters for commands 2 & 3

FUN_00102e00 24 (0x18):
    Sets DAT_001072a0[9] to q (ascii 113)
    Resets counters for commands 2 & 3

FUN_00102e17 57 (0x39):
    Sets DAT_001072a0[9] to W (ascii 87)
    Resets counters for commands 2 & 3

You can use 'l' and 'r' to traverse the string moving the pointer. The pointer is not static as I had initially thought
FUN_00102db7 is responsible for moving the cursor left and FUN_00102d91 is responsible for moving the cursor right
I do not know WHEN or HOW these are called, but it works. Neither are called in FUN_00103956

